// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma to dbml with prisma-dbml-generator, dbml to er diagram with dbdiagram.io
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user_id      String
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum UserState {
  Active
  Inactive
  Deleted
}

model User {
  id             String                   @id @default(cuid())
  phone          String?                  @unique
  name           String?
  username       String                   @unique
  password       String
  email          String                   @unique
  email_verified DateTime?
  image          String?
  linkedin       String?
  address        String?
  accounts       Account[]
  sessions       Session[]
  roles          RolesOnUsers[]
  status         UserState                @default(Active)
  created_at     DateTime                 @default(now())
  updated_at     DateTime                 @updatedAt
  resumes        Resumes[]
  applications   Applications[] // 一个人可以投递多个职位
  online_resumes OnlineResumes[]
  analysis       JobDescriptionAnalysis[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id            String         @id @default(cuid())
  name          String         @unique @db.Char(100)
  description   String?
  created_by    String
  created_at    DateTime       @default(now())
  last_modifier String?
  updated_at    DateTime       @updatedAt
  users         RolesOnUsers[]
}

model RolesOnUsers {
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  role        Role     @relation(fields: [role_id], references: [id])
  role_id     String
  assigned_at DateTime @default(now())
  assigned_by String

  @@id([user_id, role_id])
}

enum JobStatus {
  Draft
  Open
  Closed
}

model JobDescriptions {
  id            String                           @id @default(cuid())
  // title                  String                           @db.VarChar(100)
  // company                String?
  position      String?
  skills        String                           @db.Text
  work_scope    String?
  description   String                           @db.Text
  status        JobStatus                        @default(Draft)
  contact       String?
  // department             String?
  created_by    String
  created_at    DateTime                         @default(now())
  last_modifier String?
  updated_at    DateTime                         @updatedAt
  questionaires QuestionairesOnJobDescriptions[]
  applications  Applications[]
  tags          TagsOnJobDescriptions[]
  analysis      JobDescriptionAnalysis[]

  // Core Job Details
  title            String  @db.VarChar(100)
  company          String?
  department       String?
  location         String?
  job_type         String? // full-time, part-time, contract
  experience_level String? // entry, mid, senior
  salary_range     Json? // { min: number, max: number, currency: string }

  // Technical Requirements
  required_skills        Json? // Array of required skills
  preferred_skills       Json? // Array of nice-to-have skills
  technical_requirements String? @db.Text

  // Job Specifics
  responsibilities String  @db.Text
  qualifications   String  @db.Text
  benefits         String? @db.Text

  // AI Analysis Fields
  keywords        Json? // Extracted key terms for matching
  skill_weights   Json? // Importance weight of each skill
  seniority_level String? // Analyzed seniority requirement
  JobMatch        JobMatch[]

  // Add fields for better matching
  remote_policy    String? // "Remote", "Hybrid", "On-site"
  visa_sponsorship Boolean? @default(false)
  industry_sector  String?
  company_size     String? // "Startup", "Enterprise", etc.

  // Enhance AI Analysis Fields
  role_level        String? // "Junior", "Mid", "Senior", "Lead"
  cultural_keywords Json? // ["Fast-paced", "Innovative", etc.]
}

model Tags {
  id         String                  @id @default(cuid())
  name       String                  @db.VarChar(100)
  created_at DateTime                @default(now())
  updated_at DateTime                @updatedAt
  jobs       TagsOnJobDescriptions[]
}

model TagsOnJobDescriptions {
  job_id     String
  job        JobDescriptions @relation(fields: [job_id], references: [id])
  tag_id     String
  tag        Tags            @relation(fields: [tag_id], references: [id])
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  @@unique([job_id, tag_id])
}

// 1.问卷没有标准答案，所以用Text存储，让AI/人工审核
// 2. 后面可以细化QuestionaireItem: 选择题，判断题，问答题等等
// 3. (optional)使用富文本编辑器，创建Description和填写问卷
// 4. (optional)使用QuestionaireItem 组装Questionaires
// ----- 说明
// 1. 一个调查问卷可以由多个调查项目构成
// 2. 一个调查项目有多个选项可以选择，这些选独立的，可以重复使用在多个调查项目中
// 3. 一个调查项目也可以引用在多个调查问卷中
model Questionaires {
  id                 String                            @id @default(cuid())
  title              String                            @db.VarChar(100)
  description        String                            @db.Text
  created_by         String
  created_at         DateTime                          @default(now())
  last_modifier      String?
  updated_at         DateTime                          @updatedAt
  jds                QuestionairesOnJobDescriptions[]
  standard_scores    Int?
  applications       Applications[]
  questionaire_items QuestionaireItemOnQuestionaires[]
}

enum QuestionaireItemType {
  text // flexible text
  boolean // true/false
  radio // single choice
  checkbox // multiple choice
}

model QuestionaireItems {
  id            String                                       @id @default(cuid())
  description   String                                       @db.Text
  type          QuestionaireItemType                         @default(radio) // 默认单选
  answer        String?
  created_by    String
  created_at    DateTime                                     @default(now())
  last_modifier String?
  updated_at    DateTime                                     @updatedAt
  questionaires QuestionaireItemOnQuestionaires[]
  options       QuestionaireItemOptionsOnQuestionaireItems[]
}

model QuestionaireItemOptions {
  id                 String                                       @id @default(cuid())
  name               String
  // score(int or other values)
  value              String
  created_by         String
  created_at         DateTime                                     @default(now())
  last_modifier      String?
  updated_at         DateTime                                     @updatedAt
  questionaire_items QuestionaireItemOptionsOnQuestionaireItems[]
}

model QuestionaireItemOptionsOnQuestionaireItems {
  option    QuestionaireItemOptions @relation(fields: [option_id], references: [id])
  option_id String
  item      QuestionaireItems       @relation(fields: [item_id], references: [id])
  item_id   String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  operator   String

  @@unique([option_id, item_id])
}

model QuestionaireItemOnQuestionaires {
  questionaire         Questionaires     @relation(fields: [questionaire_id], references: [id])
  questionaire_id      String
  questionaire_item    QuestionaireItems @relation(fields: [questionaire_item_id], references: [id])
  questionaire_item_id String
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  operator             String

  @@unique([questionaire_id, questionaire_item_id])
}

// 一个JD可以有多个问卷(笔试题)，同时一个问卷(笔试题)也可以应用到多个不同的JD(例如不同的公司都在招前端，那么一个前端的
// 面试题就可以被多家公司HR使用)
model QuestionairesOnJobDescriptions {
  job_description    JobDescriptions @relation(fields: [job_description_id], references: [id])
  job_description_id String
  questionaire       Questionaires   @relation(fields: [questionaire_id], references: [id])
  questionaire_id    String
  created_by         String // 谁使用的
  created_at         DateTime        @default(now())
  last_modifier      String?
  updated_at         DateTime        @updatedAt

  @@id([job_description_id, questionaire_id])
}

model Resumes {
  id           String         @id @default(uuid())
  user_id      String
  user         User           @relation(fields: [user_id], references: [id])
  url          String // S3 Key
  type         String // pdf, docx, doc
  size         Int // 10MB
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  applications Applications[]
}

model OnlineResumes {
  id      String @id @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  // Basic Info
  title          String // Current/Desired job title
  summary        String  @db.Text
  headline       String? // Professional headline
  current_status String? // "Actively looking", "Open to opportunities", etc.

  // Contact & Location
  location          String?
  relocation        Boolean @default(false)
  remote_preference String? // "Remote", "Hybrid", "On-site"

  // Professional Details
  experiences Json // Array of work experiences
  // {
  //   company: string
  //   position: string
  //   department: string?
  //   location: string
  //   employment_type: string // "Full-time", "Contract", etc.
  //   duration: { 
  //     start: date, 
  //     end: date | null,  // null for current position
  //     is_current: boolean 
  //   }
  //   responsibilities: string[]
  //   achievements: string[]
  //   technologies: string[]  // Tech stack or tools used
  //   industry: string
  // }

  // Skills & Expertise
  technical_skills Json // Technical skills with proficiency
  // {
  //   skill: string
  //   proficiency: "Beginner" | "Intermediate" | "Advanced" | "Expert"
  //   years_experience: number
  //   last_used: date
  // }[]

  soft_skills Json // Soft skills with context
  // {
  //   skill: string
  //   context: string     // Example of application
  // }[]

  // Education & Certifications
  education Json // Array of education history
  // {
  //   institution: string
  //   degree: string
  //   field: string
  //   graduation: date
  //   gpa: number?
  //   honors: string[]
  //   relevant_courses: string[]
  // }[]

  certifications Json? // Professional certifications
  // {
  //   name: string
  //   issuer: string
  //   issued_date: date
  //   expiry_date: date?
  //   credential_id: string?
  // }[]

  // Career Preferences
  job_preferences Json
  // {
  //   desired_role_level: string[]    // "Entry", "Mid", "Senior", "Lead"
  //   preferred_industries: string[]   // Match with job industry_sector
  //   job_types: string[]             // "Full-time", "Contract", etc.
  //   preferred_locations: string[]    // Including "Remote"
  //   salary_expectations: {
  //     min: number
  //     max: number
  //     currency: string
  //   }
  //   notice_period: string           // "Immediate", "2 weeks", "1 month"
  //   work_authorization: string      // Visa status if applicable
  // }

  // Projects & Portfolio
  projects Json?
  // {
  //   title: string
  //   description: string
  //   technologies: string[]
  //   role: string
  //   url: string?
  //   highlights: string[]
  // }[]

  // Languages
  languages Json?
  // {
  //   language: string
  //   proficiency: "Basic" | "Intermediate" | "Fluent" | "Native"
  // }[]

  // AI Analysis Fields
  ai_analysis Json?
  // {
  //   skill_vector: number[]          // Embeddings for skill matching
  //   experience_level: string        // Calculated from experience
  //   seniority_score: number        // 0-100 based on experience
  //   key_achievements: string[]      // Extracted notable achievements
  //   industry_expertise: {
  //     industry: string
  //     years: number
  //     level: string
  //   }[]
  //   role_keywords: string[]         // For search optimization
  //   total_years_experience: number
  //   skill_clusters: {              // Grouped related skills
  //     category: string
  //     skills: string[]
  //     proficiency: number
  //   }[]
  //   match_factors: {               // Weighted factors for job matching
  //     technical_skills: number
  //     industry_fit: number
  //     experience_match: number
  //     education_match: number
  //   }
  // }

  // Metadata
  visibility   String   @default("public") // public, private, network
  completeness Int      @default(0) // Profile completion %
  last_updated DateTime @updatedAt
  created_at   DateTime @default(now())

  // Relations
  applications Applications[]
  job_matches  JobMatch[]

  skills_searchable String? @db.Text // Generated column for search

  @@index([user_id])
  @@index([skills_searchable(length: 768)])
}

enum ApplicationStatus {
  // 待审核
  pending
  // 审核通过, 可以进入下一轮面试邀请 (AI/人)
  approved
  // 审核不通过，Thanks email (AI/人)
  rejected
}

// 一个候选人申请了某一个职位，填写了职位的问卷，并附带了自己的简历
// 1. 一个职位下面有多个申请者
// 2. 一个问卷有多个人填写

// 1. 使用AI，立刻可以反馈这次申请的综合评分
// 2. 人工审核这次申请的
model Applications {
  id                  String            @id @default(uuid())
  user                User              @relation(fields: [user_id], references: [id])
  user_id             String
  online_resume       OnlineResumes     @relation(fields: [online_resume_id], references: [id])
  online_resume_id    String
  job_description     JobDescriptions   @relation(fields: [job_description_id], references: [id])
  job_description_id  String
  // fill the questionaire before apply the job
  questionaire        Questionaires?    @relation(fields: [questionaire_id], references: [id])
  questionaire_id     String?
  questionare_answers Json? // 问卷的答案 {[questionaire_item_id]: [answer]}
  // attached resume
  resume_id           String?
  resume              Resumes?          @relation(fields: [resume_id], references: [id])
  scores              Int               @default(0)
  status              ApplicationStatus @default(pending)
  created_at          DateTime          @default(now())
  last_modifier       String?
  updated_at          DateTime          @updatedAt
}

model JobDescriptionAnalysis {
  id                 String          @id @default(uuid())
  job_description    JobDescriptions @relation(fields: [job_description_id], references: [id])
  job_description_id String
  user               User            @relation(fields: [user_id], references: [id])
  user_id            String
  score              Decimal?        @db.Decimal(10, 2)
  analysis           Json?
  created_at         DateTime        @default(now())
  last_modifier      String?
  updated_at         DateTime        @updatedAt
}

// Optional: Add a new model for match analysis
model JobMatch {
  id String @id @default(uuid())

  // Relations
  job_description_id String
  job_description    JobDescriptions @relation(fields: [job_description_id], references: [id])
  online_resume_id   String
  online_resume      OnlineResumes   @relation(fields: [online_resume_id], references: [id])

  // Match Scores
  overall_match_score    Float // 0-100
  skill_match_score      Float // 0-100
  experience_match_score Float // 0-100
  education_match_score  Float // 0-100

  // Detailed Analysis
  matching_skills Json // ["React", "Node.js", etc.]
  missing_skills  Json // ["GraphQL", "AWS", etc.]
  recommendations String? @db.Text // AI suggestions for improvement

  // Metadata
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([job_description_id])
  @@index([online_resume_id])
}
